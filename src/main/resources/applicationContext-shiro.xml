<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<description>Shiro安全配置</description>
	<!-- 缓存管理器 -->
	<bean id="cacheManager" class="com.roger.shiro.customization.SpringCacheManagerWrapper">
		<property name="cacheManager" ref="springCacheManager" />
	</bean>


	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="mockRealm" />
		<!-- <property name="cacheManager"ref="myShiroEhcacheManager" /> -->
		<!-- <property name="sessionMode" value="native"/> <property name="sessionManager" 
			ref="sessionManager"/> -->
	</bean>

	<!-- 凭证匹配器 -->
	<bean id="credentialsMatcher"
		class="com.roger.shiro.customization.RetryLimitHashedCredentialsMatcher">
		<constructor-arg ref="cacheManager" />
		<property name="hashAlgorithmName" value="md5" />
		<property name="hashIterations" value="2" />
		<property name="storedCredentialsHexEncoded" value="true" />
	</bean>

	<bean id="mockRealm" class="com.roger.shiro.customization.MockRealm"></bean>

	<!-- 基于Form表单的身份验证过滤器 -->
	<bean id="formAuthenticationFilter"
		class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
		<property name="usernameParam" value="username" />
		<property name="passwordParam" value="password" />
		<property name="rememberMeParam" value="rememberMe" />
		<property name="loginUrl" value="/index.html" />
	</bean>

	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>


	<!-- <bean id="userService" class="com.roger.service.impl.UserServiceImpl"> 
		<property name="baseDAO" ref="baseDAO"/> </bean> <bean id="baseDAO" class="com.roger.dao.impl.BaseDAOImpl"> 
		<property name="sessionFactory" ref="sessionFactory" /> </bean> -->
		
		<!--
	<bean id="loadRuleService" class="com.roger.service.impl.LoadRulesServiceImpl"></bean>
	-->
	<!--Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
	<!-- Shiro Filter -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口,这个属性是必须的 -->
		<property name="securityManager" ref="securityManager" />
	</bean>

	<bean id="filterChainManager"
		class="com.roger.shiro.customization.CustomDefaultFilterChainManager">
		<!--要求登录时的链接,非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
		<property name="loginUrl" value="/index.html" />
		<property name="successUrl" value="/" />
		<!-- 用户访问未对其授权的资源时,所显示的连接 -->
		<property name="unauthorizedUrl" value="/unauthorized.html" />

		<!-- <property name="customFilters"> <util:map> <entry key="authc" value-ref="formAuthenticationFilter"/> 
			<entry key="sysUser" value-ref="sysUserFilter"/> </util:map> </property> -->
		<property name="defaultFilterChainDefinitions">
			<value>
				/** = anon
			</value>
		</property>
	</bean>
	<bean id="filterChainResolver"
		class="com.roger.shiro.customization.CustomPathMatchingFilterChainResolver">
		<property name="customDefaultFilterChainManager" ref="filterChainManager" />
	</bean>

	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetObject" ref="shiroFilter" />
		<property name="targetMethod" value="setFilterChainResolver" />
		<property name="arguments" ref="filterChainResolver" />
	</bean>


	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>

</beans>